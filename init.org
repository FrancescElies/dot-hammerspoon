#+property: header-args:lua :tangle init.lua
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src lua :exports none
  -- DO NOT EDIT THIS FILE DIRECTLY
  -- This is a file generated from a literate programing source file located at
  -- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
  -- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: My Hammerspoon config file
#+author: Diego Zamboni
#+email: diego@zzamboni.org

This is my [[http://www.hammerspoon.org/][Hammerspoon]] configuration file, forked from
[[https://github.com/zzamboni/dot-hammerspoon][zzamboni/dot-hammerspoon]] and added my customization on top of it.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See
[[file:init.lua][init.lua]] for the generated file. You can see this in a nicer format on
Diego Zamboni's blog post [[http://zzamboni.org/post/my-hammerspoon-configuration-with-commentary/][My Hammerspoon Configuration, With Commentary]].

If you want to learn more about Hammerspoon, check out [[https://leanpub.com/learning-hammerspoon][Learning Hammerspoon]]!

* Table of Contents                                          :TOC_3:noexport:
- [[#general-variables-and-configuration][General variables and configuration]]
- [[#key-bindings][Key bindings]]
- [[#spoon-management][Spoon Management]]
- [[#window-and-screen-manipulation][Window and screen manipulation]]
  - [[#window-halfs-and-thirds][Window Halfs and Thirds]]
  - [[#window-screen-left-and-right][Window Screen Left and Right]]
  - [[#window-grid][Window Grid]]
  - [[#toggle-screen-rotation][Toggle Screen Rotation]]
- [[#organization-and-productivity][Organization and Productivity]]
  - [[#universal-archive][Universal Archive]]
  - [[#text-clipboard-history][Text Clipboard History]]
- [[#system-and-ui][System and UI]]
- [[#other-applications][Other applications]]
- [[#timers][Timers]]
- [[#mouse][Mouse]]
- [[#browser-links][Browser links]]
- [[#console][Console]]
- [[#seal][Seal]]
  - [[#user-actions][User Actions]]
- [[#network-transitions][Network transitions]]
  - [[#actions][Actions]]
    - [[#set-default-browser][Set default browser]]
  - [[#action-groups][Action groups]]
  - [[#wifi-transitions-configuration][WiFi Transitions configuration]]
- [[#pop-up-translation][Pop-up translation]]
- [[#miscellaneous-stuff][Miscellaneous stuff]]
  - [[#print-current-hotkeys][Print current hotkeys]]
- [[#end-of-config-animation][End-of-config animation]]

* General variables and configuration

Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+begin_src lua
hs.logger.defaultLogLevel="info"
logger = hs.logger.new("init.lua")
#+end_src

I use =hyper= and =shift_hyper= as the modifiers for most of my key bindings, so I define them as variables here for easier referencing.

#+begin_src lua
  hyper = {"cmd","alt","ctrl"}
  shift_hyper = {"cmd","alt","ctrl","shift"}
#+end_src

Reload configuration binding.

#+begin_src lua
hs.hotkey.bindSpec({ hyper, "r" }, "reload config", hs.reload)
#+end_src

Set up an abbreviation for =hs.drawing.color.x11= since I use it repeatedly later on.

#+begin_src lua
  col = hs.drawing.color.x11
#+end_src

Work's logo, which I use in some of my Seal shortcuts later on.

#+begin_src lua
  workLogo = hs.image.imageFromPath(hs.configdir .. "/files/work.png")
#+end_src

Save home path to variable for later reuse.
#+begin_src lua
 homePath = hs.fs.pathToAbsolute('~')
#+end_src
In my =init-local-startup.lua= file I keep some private variables that
need to be loaded before anything else.

#+begin_src lua
local initStartupFile = hs.configdir .. "/init-local-startup.lua"
local initLocalStartup=loadfile(initStartupFile)
if initLocalStartup then
  logger.i("Loading", "init-local-startup.lua", "")
  initLocalStartup()
end
#+end_src

When reloading hammerspoon configuration it will set =hammerspoon= as the
current aplication, forcing you to do =cmd + Tab= to come back to the
current application, normally your text editor where you are changing
the configuration file.

#+begin_src lua
local appBeforeReloading = hs.application.frontmostApplication()
#+end_src

* Key bindings

| Mod  | Key   | Description                         |
|------+-------+-------------------------------------|
| ⌘⌃   | 1     | Window move to quadrant 1 ◰         |
| ⌘⌃   | 2     | Window move to quadrant 2 ◳         |
| ⌘⌃   | 3     | Window move to quadrant 3 ◱         |
| ⌘⌃   | 4     | Window move to quadrant 4 ◲         |
| ⌘⌃   | UP    | Window move third and halfs ↑       |
| ⌘⌃   | RIGHT | Window move third and halfs →       |
| ⌘⌃   | DOWN  | Window move third and halfs ↓       |
| ⌘⌃   | LEFT  | Window move third and halfs ←       |
| ⌃⌥   | UP    | Window to next third ↑              |
| ⌃⌥   | RIGHT | Window to next third →              |
| ⌃⌥   | DOWN  | Window to next third ↓              |
| ⌃⌥   | LEFT  | Window to next third ←              |
| ⌘⌃⌥  | UP    | Maximize window                     |
| ⌘⌃⌥  | F     | Maximize window                     |
| ⌘⌃⌥  | G     | Resize with grid                    |
| ⌘⌥⇧  | LEFT  | Shrink window horizontally          |
| ⌘⌥⇧  | RIGHT | Grow window horizontally            |
| ⌘⌥   | Z     | Undo  window action                 |
|------+-------+-------------------------------------|
| ⌘⌃⌥⇧ | M     | log mouse position                  |
| ⌘⇧   | V     | Clipboard History (Paste)           |
| ⌘⌥   | C     | Window to the center                |
| ⌘    | SPACE | Spotlight (Seal)                    |
| ⌘⌃⌥  | 1     | Caffeine                            |
| ⌘⌃⌥  | C     | Show/Hide console                   |
| ⌘⌃⌥  | L     | Insert browser URL as org mode link |
| ⌘⌃⌥  | M     | Locate mouse                        |
| ⌘⌃⌥  | R     | Reload config                       |
| ⌘⌃⌥  | T     | Translate text                      |
|------+-------+-------------------------------------|
| ⌘⌃⌥  | F15   |                                     |
| ⌘⌃⌥⇧ | F     |                                     |
| ⌘⌃⌥⇧ | V     |                                     |
| ⌘⌃⌥  | LEFT  |                                     |
| ⌘⌃⌥  | RIGHT |                                     |
|------+-------+-------------------------------------|

* Spoon Management

Set up SpoonInstall - this is the only spoon that needs to be manually
installed (it is already there if you check out this repository), all
the others are installed and configured automatically.

#+begin_src lua
  hs.loadSpoon("SpoonInstall")
#+end_src

Configuration of my personal spoon repository, which contains Spoons
that have not been merged in the main repo. See the descriptions at
https://zzamboni.github.io/zzSpoons/.

#+begin_src lua
  spoon.SpoonInstall.repos.zzspoons = {
    url = "https://github.com/zzamboni/zzSpoons",
    desc = "zzamboni's spoon repository",
  }
#+end_src

I prefer sync notifications, makes them easier to read.

#+begin_src lua
  spoon.SpoonInstall.use_syncinstall = true
#+end_src

This is just a shortcut to make the declarations below look more
readable, i.e. =Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+begin_src lua
  Install=spoon.SpoonInstall
#+end_src

* Window and screen manipulation

** Window Halfs and Thirds
The [[http://www.hammerspoon.org/Spoons/WindowHalfsAndThirds.html][WindowHalfAndThirds]] spoon sets up multiple key bindings for manipulating the size and position of windows.

#+begin_src lua
  Install:andUse("WindowHalfsAndThirds",
                 {
                   config = {
                     use_frame_correctness = true
                   },
                   hotkeys = 'default'
                 }
  )
#+end_src

** Window Screen Left and Right
The [[http://www.hammerspoon.org/Spoons/WindowScreenLeftAndRight.html][WindowScreenLeftAndRight]] spoon sets up key bindings for moving windows between multiple screens.

#+begin_src lua
  Install:andUse("WindowScreenLeftAndRight",
                 {
                   hotkeys = 'default'
                 }
  )
#+end_src

** Window Grid
The [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] spoon sets up a key binding (=Hyper-g= here) to overlay a grid that allows resizing windows by specifying their opposite corners.

#+begin_src lua
  Install:andUse("WindowGrid",
                 {
                   config = { gridGeometries = { { "6x4" } } },
                   hotkeys = {show_grid = {hyper, "g"}},
                   start = true
                 }
  )
#+end_src

** Toggle Screen Rotation
The [[http://www.hammerspoon.org/Spoons/ToggleScreenRotation.html][ToggleScreenRotation]] spoon sets up a key binding to rotate the external screen (the spoon can set up keys for multiple screens if needed, but by default it rotates the first external screen).

#+begin_src lua
  Install:andUse("ToggleScreenRotation",
                 {
                   hotkeys = { first = {hyper, "f15"} }
                 }
  )
#+end_src

* Organization and Productivity

** Universal Archive
The [[http://www.hammerspoon.org/Spoons/UniversalArchive.html][UniversalArchive]] spoon sets up a single key binding (=Ctrl-Cmd-a=)
to archive the current item in Evernote, Mail and Outlook. Disabled at
the moment.

#+begin_src lua
Install:andUse(
  "UniversalArchive",
  {
    disable = true,
    config = {
      evernote_archive_notebook = ".Archive",
      outlook_archive_folder = "Archive (diego.zamboni@swisscom.com)",
      archive_notifications = false
    },
    hotkeys = { archive = { { "ctrl", "cmd" }, "a" } }
  }
)
#+end_src

** Text Clipboard History
The [[http://www.hammerspoon.org/Spoons/TextClipboardHistory.html][TextClipboardHistory]] spoon implements a clipboard history, only for
text items. It is invoked with =Cmd-Shift-v=.

This is disabled for the moment as I experiment with BetterTouchTool's
built-in clipboard history, which I have bound to the same key
combination for consistency in my workflow.

#+begin_src lua
Install:andUse(
  "TextClipboardHistory",
  {
    config = {
      show_in_menubar = false,
    },
    hotkeys = {
      toggle_clipboard = { { "cmd", "shift" }, "v" } },
    start = true,
  }
)
#+end_src

* System and UI

The [[http://www.hammerspoon.org/Spoons/Caffeine.html][Caffeine]] spoon allows preventing the display and the machine from sleeping. I use it frequently when playing music from my machine, to avoid having to unlock the screen whenever I want to change the music.

#+begin_src lua
    Install:andUse("Caffeine", {
                     start = true,
                     hotkeys = {
                       toggle = { hyper, "1" }
                     }
    })
#+end_src

The [[http://www.hammerspoon.org/Spoons/MenubarFlag.html][MenubarFlag]] spoon colorizes the menubar according to the selected keyboard language or layout (functionality inspired by [[https://pqrs.org/osx/ShowyEdge/index.html.en][ShowyEdge]]). I use English, Spanish and German, so those are the colors I have defined.

#+begin_src lua
  Install:andUse("MenubarFlag",
                 {
                   config = {
                     colors = {
                       ["U.S."] = { },
                       Spanish = {col.green, col.white, col.red},
                       German = {col.black, col.red, col.yellow},
                     }
                   },
                   start = true
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/MouseCircle.html][MouseCircle]] spoon shows a circle around the mouse pointer when triggered.

#+begin_src lua
  Install:andUse("MouseCircle",
                 {
                   config = {
                     color = hs.drawing.color.x11.rebeccapurple
                   },
                   hotkeys = {
                     show = { hyper, "m" }
                   }
                 }
  )
#+end_src

One of my original bits of Hammerspoon code, now made into a spoon (although I keep it disabled, since I don't really use it). The [[http://www.hammerspoon.org/Spoons/ColorPicker.html][ColorPicker]] spoon shows a menu of the available color palettes, and when you select one, it draws swatches in all the colors in that palette, covering the whole screen. You can click on any of them to copy its name to the clipboard, or cmd-click to copy its RGB code.

#+begin_src lua
  Install:andUse("ColorPicker",
                 {
                   disable = true,
                   hotkeys = {
                     show = { hyper, "c" }
                   },
                   config = {
                     show_in_menubar = false,
                   },
                   start = true,
                 }
  )
#+end_src


The [[http://www.hammerspoon.org/Spoons/KSheet.html][KSheet]] spoon traverses the current application's menus and builds a cheatsheet of the keyboard shortcuts, showing it in a nice popup window.

#+begin_src lua :tangle no
  Install:andUse("KSheet",
                 {
                   hotkeys = {
                     toggle = { hyper, "/" }
  }})
#+end_src

The [[http://www.hammerspoon.org/Spoons/TimeMachineProgress.html][TimeMachineProgress]] spoon shows an indicator about the progress of the ongoing Time Machine backup. The indicator disappears when there is no backup going on.

#+begin_src lua
  Install:andUse("TimeMachineProgress",
                 {
                   start = true
                 }
  )
#+end_src

* Other applications

The [[http://www.hammerspoon.org/Spoons/ToggleSkypeMute.html][ToggleSkypeMute]] spoon sets up the missing keyboard bindings for toggling the mute button on Skype and Skype for Business. I'm not fully happy with this spoon - it should auto-detect the application instead of having separate keys for each application, and it could be extended to more generic use.

#+begin_src lua
  Install:andUse("ToggleSkypeMute",
                 {
                   hotkeys = {
                     toggle_skype = { shift_hyper, "v" },
                     toggle_skype_for_business = { shift_hyper, "f" }
                   }
                 }
  )
#+end_src

The [[http://www.hammerspoon.org/Spoons/HeadphoneAutoPause.html][HeadphoneAutoPause]] spoon implements auto-pause/resume for iTunes, Spotify and others when the headphones are unplugged.

#+begin_src lua
  Install:andUse("HeadphoneAutoPause",
                 {
                   start = true
                 }
  )
#+end_src

* Timers
#+begin_src lua
hs.timer.doAt("12:58", function () hs.notify.show("Lunch Time", os.date():sub(1), "") end)
hs.timer.doAt("17:50", function () hs.notify.show("Time reminder", os.date():sub(1), "") end)
#+end_src

* Mouse
A function to get the mouse position, this will print some examples that
can be used for automating repetitive tasks with the mouse.
The idea is to move the mouse to the position is needed and press
={shift_hyper, "m"}= to call =getMousePosition= and get the click and
move functions printied out in the terminal that can be now used in a
lua script. Once this script is written I could bound it to a
keyshortcut.

#+begin_src lua
function getMousePosition()
  local position = hs.mouse.getAbsolutePosition()
  logger.i("Mouse Position", string.format("%s, %s", position.x, position.y), "")
  hs.notify.show("Mouse Position", "recorded", string.format("%s, %s", position.x, position.y))
  logger.i("Scripting help", string.format("hs.mouse.setAbsolutePosition(hs.geometry.point(%s, %s))", position.x, position.y), "")
  logger.i("Scripting help", string.format("hs.eventtap.leftClick(hs.geometry.point(%s, %s))", position.x, position.y), "")
  logger.i("Scripting help", string.format("hs.timer.doAfter(sec, fn) -> timer", position.x, position.y), "")
end
hs.hotkey.bindSpec({ shift_hyper, "m" }, "log mouse position", getMousePosition)
#+end_src

* Browser links
#+begin_src lua
-- Register browser tab typist: Type URL of current tab of running
-- browser in org mode link format. i.e. [[link][title]]
-- TODO browser in markdown format. i.e. [title](link)
function getBrowserLinkAsOrgModeLink()
    local currentApp = hs.application.frontmostApplication()
    local brave_running = hs.application.applicationsForBundleID("Brave")
    local safari_running = hs.application.applicationsForBundleID("com.apple.Safari")
    local chrome_running = hs.application.applicationsForBundleID("com.google.Chrome")
    local firefox_running = hs.application.applicationsForBundleID("org.mozilla.firefox")

    function dataToOrgLink(data)
        return "[[" .. data[1] .. "][" .. data[2] .. "]]"
    end

    if #brave_running > 0 then
      local stat, data = hs.applescript('tell application "Safari" to get {URL, name} of current tab of window 1')
      if stat then hs.eventtap.keyStrokes(dataToOrgLink(data)) end
    elseif #safari_running > 0 then
      local stat, data = hs.applescript('tell application "Safari" to get {URL, name} of current tab of window 1')
      if stat then hs.eventtap.keyStrokes(dataToOrgLink(data)) end
    elseif #chrome_running > 0 then
      local stat, data = hs.applescript('tell application "Google Chrome" to get {URL, title} of active tab of window 1')
      if stat then hs.eventtap.keyStrokes(dataToOrgLink(data)) end
    elseif #firefox_running > 0 then
      succeeded, parsedOutput, rawOutputOrError = hs.osascript.applescriptFromFile(hs.configdir .. '/get-firefox-url.scpt')
      currentApp:activate()
      -- hs.pasteboard.setContents(dataToOrgLink(parsedOutput))
      -- hs.eventtap.keyStroke({"cmd"}, "v")
      if parsedOutput then hs.eventtap.keyStrokes(dataToOrgLink(parsedOutput)) end
    end
end
hs.hotkey.bindSpec({ hyper, "l" }, "browser URL as org mode link", getBrowserLinkAsOrgModeLink)
#+end_src

Firefox does not suppport applescript so we need to do as if we would
copy the url manually from Firefox itself.

#+begin_src applescript :tangle get-firefox-url.scpt
-- https://matthewbilyeu.com/blog/2018-08-24/getting-url-and-tab-title-from-firefox-with-applescript
use scripting additions
use framework "Foundation"

tell application "Firefox" to activate

-- get the tab title from FF
tell application "System Events" to tell process "firefox"
	set frontmost to true
	set the_title to name of windows's item 1
	set the_title to (do shell script "echo " & quoted form of the_title & " | tr '[' ' '")
	set the_title to (do shell script "echo " & quoted form of the_title & " | tr ']' ' '")
end tell

set thePasteboard to current application's NSPasteboard's generalPasteboard()
set theCount to thePasteboard's changeCount()

-- send cmd+l and cmd+c keystrokes to FF to highlight and copy the URL
tell application "System Events"
	keystroke "l" using {command down}
	delay 0.2
	keystroke "c" using {command down}
end tell

-- wait for the clipboard content change to have been detected
repeat 20 times
	if thePasteboard's changeCount() is not theCount then exit repeat
	delay 0.1
end repeat

-- get the clipboard contents
set the_url to the clipboard

--return "[[" & the_url & "][" & the_title & "]]" as text
return { the_url, the_title }
#+end_src

* Console
Adds a binding to easily show and hide hammerspoon console.

#+begin_src lua
hs.hotkey.bindSpec({ hyper, "c" }, "toggle console",hs.toggleConsole)
#+end_src

* Seal

The [[http://www.hammerspoon.org/Spoons/Seal.html][Seal]] spoon is a powerhouse - it implements a Spotlight-like
launcher, but which allows for infinite configurability of what can be
done or searched from the launcher window. I use Seal as my default
launcher, triggered with =Cmd-space=, although I still keep Spotlight
around under =Hyper-space=, mainly for its search capabilities.

We start by loading the spoon, and specifying which plugins we want.

#+begin_src lua :noweb no-export
  Install:andUse("Seal",
                 {
                   hotkeys = { show = { {"cmd"}, "space" } },
                   fn = function(s)
                     s:loadPlugins({"apps", "calc", "safari_bookmarks", "screencapture", "useractions"})
                     s.plugins.safari_bookmarks.always_open_with_safari = false
                     s.plugins.useractions.actions =
                       {
                           <<useraction-definitions>>
                       }
                     s:refreshAllCommands()
                   end,
                   start = true,
                 }
  )
#+end_src

** User Actions
The =useractions= Seal plugin allows me to define my own shortcuts. For example, a bookmark to the Hammerspoon documentation page:

#+begin_src lua :tangle no :noweb-ref useraction-definitions
["Hammerspoon docs webpage"] = {
  url = "http://hammerspoon.org/docs/",
  icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
},
["Corrector català"] = {
  url = "https://www.softcatala.org/corrector/",
  icon = hs.image.imageFromName(hs.image.systemImageNames.Computer),
},
#+end_src

Set default browser

#+begin_src lua :tangle no :noweb-ref useraction-definitions
["Set default browser to firefox"] = {
  fn = function () setDefaultBrowser("firefox") end,
  icon = hs.image.imageFromName(hs.image.systemImageNames.Computer),
},
["Set default browser to chrome"] = {
  fn = function () setDefaultBrowser( "chrome") end,
  icon = hs.image.imageFromName(hs.image.systemImageNames.Computer),
},
["Set default browser to brave"] = {
  fn = function () setDefaultBrowser("browser") end,
  icon = hs.image.imageFromName(hs.image.systemImageNames.Computer),
},
#+end_src

Or to manually trigger my work/non-work transition scripts (see below):

#+begin_src lua :tangle no :noweb-ref useraction-definitions
["WIFI: Leave work (" .. workNetwork .. ")"] = {
  fn = function()
    spoon.WiFiTransitions:processTransition(homeNetwork, workNetwork)
  end,
  icon = workLogo,
},
["WIFI: Arrive work (" .. workNetwork .. ")"] = {
  fn = function()
    spoon.WiFiTransitions:processTransition(workNetwork, nil)
  end,
  icon = workLogo,
},
["WIFI: Arrive home (" .. homeNetwork .. ")"] = {
  fn = function()
    spoon.WiFiTransitions:processTransition(homeNetwork, nil)
  end,
  icon = workLogo,
},
#+end_src

Or to translate things using [[https://dict.leo.org/][dict.leo.org]]:

#+begin_src lua :tangle no :noweb-ref useraction-definitions
  ["Translate using Leo"] = {
    url = "http://dict.leo.org/englisch-deutsch/${query}",
    icon = 'favicon',
    keyword = "leo",
  }
#+end_src

* Network transitions

The [[http://www.hammerspoon.org/Spoons/WiFiTransitions.html][WiFiTransitions]] spoon allows triggering arbitrary actions when the
SSID changes.

** Actions
Start and stop any app.
#+begin_src lua
function startApp(appName)
  logger.i("start app", string.format("'%s'", appName), "")
  hs.application.launchOrFocus(appName)
end

function stopApp(appName)
  local app = hs.appfinder.appFromName(appName)
  if app then
    logger.i("quit app", string.format("'%s'", appName), "")
    app:kill()
  end
end

#+end_src

Connect to raspberry pi and do backup
#+begin_src lua
function backupToRaspberry()
  local cmd = "~/usr/bin/my-raspberry-sync"
  task = hs.task.new(
    cmd,
    function(exitCode, stdOut, stdErr)
      logger.i("Rsync", "finished", string.format("exitCode: '%s'", exitCode))
    end
  )
  task:start()
end
#+end_src

Start and stop docker
#+begin_src lua
function manageDocker(action)
  logger.i("Docker", action, "")
  if (action == 'start') then
    output, status, t, rc = hs.execute("~/usr/bin/work-docker.sh", true)
  else
    output, status, t, rc = hs.execute("~/usr/bin/work-docker.sh stop", true)
  end
end

#+end_src

Start and stop tmux functions
#+begin_src lua
function homeTmuxStart()
  logger.i("Tmux", "start", "")
  output, status, t, rc = hs.execute("~/usr/bin/home-tmux.sh", true)
end

function workTmuxStart()
  logger.i("Tmux", "start", "")
  output, status, t, rc = hs.execute("~/usr/bin/work-tmux.sh", true)
end

function workTmuxStop()
  logger.i("Tmux", "stop", "")
  output, status, t, rc = hs.execute("tmux kill-session -twork", true)
end


#+end_src

*** Set default browser
This function will allow me to change the default browser depending on
the network I am connected to. Chrome for work (as it is our main
browser for developement), firefox for home (I would like to use it for
work too but somehow it is a pain to debug angular-typescript projects
with it).
#+begin_src lua
function setDefaultBrowser(browserName)
  -- browserName: can be firefox, chrome or browser (brave)
  logger.i("setDefaultBrowser", browserName, "")
  -- defaultbrowser: https://github.com/kerma/defaultbrowser
  local home = hs.fs.pathToAbsolute('~')
  output, status, t, rc = hs.execute(string.format("defaultbrowser %s", browserName), true)
  hs.osascript.applescriptFromFile(hs.configdir .. '/confirm-yes-system-dialog.scpt')
end

#+end_src

**** Auto click security box "are you sure?"
With the following apple script you can get rid of the annoying confirmation
security box, by automatically clicking yes.

[[file:./files/change-browser-question.png]]

#+begin_src applescript :tangle confirm-yes-system-dialog.scpt
-- https://github.com/kerma/defaultbrowser/issues/3#issuecomment-319434425
try
	tell application "System Events"
		tell application process "CoreServicesUIAgent"
			tell window 1
				tell (first button whose name starts with "use")
					perform action "AXPress"
				end tell
			end tell
		end tell
	end tell
end try
#+end_src

** Action groups
The following block defines groups of actions/functions to call

[[https://stackoverflow.com/questions/1410862/concatenation-of-tables-in-lua][Concatenation of tables in Lua - Stack Overflow]]
#+BEGIN_SRC lua
function TableConcat(t1,t2)
    local tFinal = {}
    for i=1,#t1 do
        tFinal[#tFinal+1] = t1[i]
    end
    for i=1,#t2 do
        tFinal[#tFinal+1] = t2[i]
    end
    return tFinal
end
#+end_src

Actions to be performed when leaving work network.
#+begin_src lua
leaveWorkGroup = {
  hs.fnutils.partial(manageDocker, "stop"),
  hs.fnutils.partial(stopApp, "Slack"),
  hs.fnutils.partial(stopApp, "com.google.Chrome"),
  hs.fnutils.partial(workTmuxStop),
  hs.fnutils.partial(startApp, "Firefox"),
  hs.fnutils.partial(setDefaultBrowser, "firefox"),
  hs.fnutils.partial(hs.timer.doAfter, 60, hs.fnutils.partial(stopApp, "Docker")),
}

#+end_src

Actions to be performed when arriving to work.
#+begin_src lua
startWorkGroup = {
  hs.fnutils.partial(homeTmuxStart),
  hs.fnutils.partial(startApp, "Docker"),
  hs.fnutils.partial(manageDocker, "start"),
  hs.fnutils.partial(stopApp, "Firefox"),
  hs.fnutils.partial(startApp, "Slack"),
  hs.fnutils.partial(startApp, "com.google.Chrome"),
  hs.fnutils.partial(setDefaultBrowser, "chrome"),
  hs.fnutils.partial(hs.timer.doAfter, 150, workTmuxStart),  -- needs to wait for docker (x seconds)
}
#+END_SRC

Actions to be done when arriving home
#+begin_src lua
arriveHomeGroup = {
  hs.fnutils.partial(homeTmuxStart),
  backupToRaspberry,
}
#+end_src

** WiFi Transitions configuration
The configuration for the WiFiTransitions spoon invoked these functions with the appropriate parameters.

Record event with timestamp to a file.
#+begin_src lua
function recordTime(action)
  local fileName = homePath .. "/tmp/joined-wifi.txt"
  local file = io.open(fileName, "a")
  file:write(action)
  file:close()
end
#+end_src

#+begin_src lua
Install:andUse(
  "WiFiTransitions",
  {
    config = {
      actions = {
        { -- Test action just to see the SSID transitions
          fn = function(_, _, prev_ssid, new_ssid)
            local date = os.date()
            local transition = string.format("%s from '%s' to '%s'\n", date, prev_ssid, new_ssid)
            recordTime(transition)
            hs.notify.show("SSID change", transition, "")
          end
        },
        {       -- when joining home network do:
          to = homeNetwork,
          fn = TableConcat(arriveHomeGroup, leaveWorkGroup)
        },
        {       -- when joining work network do:
          to = workNetwork,
          fn = startWorkGroup
        },
      }
    },
    start = true,
  }
)
#+end_src

* Pop-up translation

I live in Switzerland, and my German is far from perfect, so the [[http://www.hammerspoon.org/Spoons/PopupTranslateSelection.html][PopupTranslateSelection]] spoon helps me a lot. It allows me to select some text and, with a keystroke, translate it to any of three languages using Google Translate. Super useful! Usually, Google's auto-detect feature works fine, so the =translate_to_<lang>= keys are sufficient. I have some =translate_<from>_<to>= keys set up for certain language pairs for when this doesn't quite work (I don't think I've ever needed them).

#+begin_src lua
local wm=hs.webview.windowMasks
Install:andUse(
  "PopupTranslateSelection",
  {
    config = {
      popup_style = wm.utility|wm.HUD|wm.titled|wm.closable|wm.resizable,
    },
    hotkeys = {
      translate = { hyper, "t" },
    }
  }
)
#+end_src

I am now testing [[http://www.hammerspoon.org/Spoons/DeepLTranslate.html][DeepLTranslate]], based on PopupTranslateSelection but which uses the [[https://www.deepl.com/en/translator][DeepL translator]].

#+begin_src lua
Install:andUse(
  "DeepLTranslate",
  {
    disable = true,
    config = {
      popup_style = wm.utility|wm.HUD|wm.titled|wm.closable|wm.resizable,
    },
    hotkeys = {
      translate = { hyper, "e" },
    }
  }
)
#+end_src

* Miscellaneous stuff

In my =init-local.lua= file I keep some experimental or private stuff that I don't want to publish in my main config.

#+begin_src lua
  local localstuff=loadfile(hs.configdir .. "/init-local.lua")
  if localstuff then
    localstuff()
  end
#+end_src

** Print current hotkeys

#+begin_src lua
hotkeys = hs.hotkey.getHotkeys()
for k, v in pairs(hotkeys) do
  -- idx - a string describing the keyboard combination for the hotkey
  -- msg - the hotkey message, if provided when the hotkey was created
  -- (prefixed with the keyboard combination)
  print(string.format("%s %s", v.msg, v.idx))
end
#+end_src

* End-of-config animation

The [[http://www.hammerspoon.org/Spoons/FadeLogo.html][FadeLogo]] spoon simply shows an animation of the Hammerspoon logo to signal the end of the config load.

#+begin_src lua
Install:andUse("FadeLogo",
               {
                 config = {
                   default_run = 1.0,
                 },
                 start = true
               }
)
#+end_src

If you don't want to use FadeLogo, you can have a regular notification.

#+begin_src lua
-- hs.notify.show("Configuration reloaded", "Enjoy!", "")
#+end_src

Bring app you were using to the front again after realoading
hammerspoon's configuraion.

#+begin_src lua
appBeforeReloading:activate()
#+end_src
