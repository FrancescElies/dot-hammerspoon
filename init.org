#+PROPERTY: header-args:lua :tangle init.lua
#+PROPERTY: header-args :mkdirp yes :comments no 
#+STARTUP: indent

#+TITLE:  My Hammerspoon config file
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

#+BEGIN_SRC lua :exports none
  -- DO NOT EDIT THIS FILE DIRECTLY
  -- This is a file generated from a literate programing source file located at
  -- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
  -- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+END_SRC

* Introduction

This is my [[http://www.hammerspoon.org/][Hammerspoon]] configuration file. It is written using [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate
programming]] style using org-mode in Emacs. You can see the generated
file at [[https://github.com/zzamboni/dot-hammerspoon/blob/master/init.lua]].

* Table of Contents                                                     :TOC:noexport:
- [[#introduction][Introduction]]
- [[#general-variables-and-configuration][General variables and configuration]]
- [[#spoon-management][Spoon Management]]
- [[#url-dispatching-to-site-specific-browsers][URL Dispatching to site-specific browsers]]
- [[#window-and-screen-manipulation][Window and screen manipulation]]
- [[#organization-and-productivity][Organization and Productivity]]
- [[#system-and-ui][System and UI]]
- [[#other-applications][Other applications]]
- [[#the-rest][The rest]]

* General variables and configuration

Global log level. Per-spoon log level can be configured in each
=Install:andUse= block below.

#+BEGIN_SRC lua
  hs.logger.defaultLogLevel="info"
#+END_SRC

I use =hyper= and =shift_hyper= as the modifiers for most of my key
bindings, so I define them as variables here for easier referencing.

#+BEGIN_SRC lua
  hyper = {"cmd","alt","ctrl"}
  shift_hyper = {"cmd","alt","ctrl","shift"}
#+END_SRC

Set up an abbreviation for =hs.drawing.color.x11= since I use it
repeatedly later on.

#+BEGIN_SRC lua
  col = hs.drawing.color.x11
#+END_SRC

Work's logo, which I use in some of my Seal shortcuts later on.

#+BEGIN_SRC lua
  swisscom_logo = hs.image.imageFromPath(hs.configdir .. "/files/swisscom_logo_2x.png")
#+END_SRC

* Spoon Management

Set up SpoonInstall - this is the only spoon that needs to be manually
installed (it is already there if you check out this repository), all
the others are installed and configured automatically.

#+BEGIN_SRC lua
  hs.loadSpoon("SpoonInstall")
#+END_SRC

Configuration of my personal spoon repository, which contains Spoons
that have not been merged in the main repo.  See the descriptions at
http://zzamboni.org/zzSpoons/.
  
#+BEGIN_SRC lua
  spoon.SpoonInstall.repos.zzspoons = {
    url = "https://github.com/zzamboni/zzSpoons",
    desc = "zzamboni's spoon repository",
  }
#+END_SRC

I prefer sync notifications, makes them easier to read.

#+BEGIN_SRC lua
  spoon.SpoonInstall.use_syncinstall = true
#+END_SRC

This is just a shortcut to make the declarations below look more
readable, i.e. =Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+BEGIN_SRC lua
  Install=spoon.SpoonInstall
#+END_SRC

* URL Dispatching to site-specific browsers

The [[http://www.hammerspoon.org/Spoons/URLDispatcher.html][URLDispatcher]] spoon makes it possible to open URLs with different
browsers. I have created different site-specific browsers using
[[https://github.com/dmarmor/epichrome][Epichrome]], which allows me to keep site-specific bookmarks, search
settings, etc.

#+BEGIN_SRC lua
  Install:andUse("URLDispatcher",
                 {
                   config = {
                     url_patterns = {
                       { "https?://issue.swisscom.ch", "org.epichrome.app.SwisscomJira" },
                       { "https?://issue.swisscom.com", "org.epichrome.app.SwisscomJira" },
                       { "https?://jira.swisscom.com", "org.epichrome.app.SwisscomJira" },
                       { "https?://wiki.swisscom.com", "org.epichrome.app.SwisscomWiki" },
                       { "https?://collaboration.swisscom.com", "org.epichrome.app.SwisscomCollab" },
                       { "https?://smca.swisscom.com", "org.epichrome.app.SwisscomTWP" },
                       { "https?://portal.corproot.net", "com.google.Chrome" },
                       { "https?://app.opsgenie.com", "org.epichrome.app.OpsGenie" },
                     },
                     default_handler = "com.google.Chrome"
                   },
                   start = true
                 }
  )
#+END_SRC

* Window and screen manipulation

The [[http://www.hammerspoon.org/Spoons/WindowHalfsAndThirds.html][WindowHalfAndThirds]] spoon sets up multiple key bindings for
manipulating the size and position of windows.

#+BEGIN_SRC lua
  Install:andUse("WindowHalfsAndThirds",
                 {
                   config = {
                     use_frame_correctness = true
                   },
                   hotkeys = 'default'
                 }
  )
#+END_SRC

The [[http://zzamboni.org/zzSpoons/WindowScreenLeftAndRight.html][WindowScreenLeftAndRight]] spoon sets up key bindings for moving
windows between multiple screens.

#+BEGIN_SRC lua
  Install:andUse("WindowScreenLeftAndRight",
                 {
                   hotkeys = 'default'
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] spoon sets up a key binding (=Hyper-g= here) to overlay a
grid that allows resizing windows by specifying their opposite
corners.

#+BEGIN_SRC lua
  Install:andUse("WindowGrid",
                 {
                   config = { gridGeometries = { { "6x4" } } },
                   hotkeys = {show_grid = {hyper, "g"}},
                   start = true
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/ToggleScreenRotation.html][ToggleScreenRotation]] spoon sets up a key binding to rotate the
external screen (the spoon can set up keys for multiple screens if
needed, but by default it rotates the first external screen).

#+BEGIN_SRC lua
  Install:andUse("ToggleScreenRotation",
                 {
                   hotkeys = { first = {hyper, "f15"} }
                 }
  )
#+END_SRC

* Organization and Productivity

The [[http://www.hammerspoon.org/Spoons/UniversalArchive.html][UniversalArchive]] spoon sets up a single key binding (=Ctrl-Cmd-a=)
to archive the current item in Evernote, Mail and Outlook.

#+BEGIN_SRC lua
  Install:andUse("UniversalArchive",
                 {
                   config = {
                     evernote_archive_notebook = ".Archive",
                     outlook_archive_folder = "Archive (On My Computer)",
                     archive_notifications = false
                   },
                   hotkeys = { archive = { { "ctrl", "cmd" }, "a" } }
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/SendToOmniFocus.html][SendToOmniFocus]] spoon sets up a single key binding (=Hyper-t=) to
send the current item to OmniFocus from multiple applications.

#+BEGIN_SRC lua
  Install:andUse("SendToOmniFocus",
                 {
                   config = {
                     quickentrydialog = false,
                     notifications = false
                   },
                   hotkeys = {
                     send_to_omnifocus = { hyper, "t" }
                   },
                   fn = function(s)
                     s:registerApplication("Swisscom Collab", { apptype = "chromeapp", itemname = "tab" })
                     s:registerApplication("Swisscom Wiki", { apptype = "chromeapp", itemname = "wiki page" })
                     s:registerApplication("Swisscom Jira", { apptype = "chromeapp", itemname = "issue" })
                   end
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/EvernoteOpenAndTag.html][EvernoteOpenAndTag]] spoon sets up some missing key bindings for
note manipulation in Evernote.

#+BEGIN_SRC lua
  -- 
  Install:andUse("EvernoteOpenAndTag",
                 {
                   hotkeys = {
                     open_note = { hyper, "o" },
                     ["open_and_tag-+work,+swisscom"] = { hyper, "w" },
                     ["open_and_tag-+personal"] = { hyper, "p" },
                     ["tag-@zzdone"] = { hyper, "z" }
                   }
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/TextClipboardHistory.html][TextClipboardHistory]] spoon implements a clipboard history, only
for text items. It is invoked with =Cmd-Shift-v=.

#+BEGIN_SRC lua
  Install:andUse("TextClipboardHistory",
                 {
                   config = {
                     show_in_menubar = false,
                   },
                   hotkeys = {
                     toggle_clipboard = { { "cmd", "shift" }, "v" } },
                   start = true,
                 }
  )
#+END_SRC

* System and UI

The [[http://zzamboni.org/zzSpoons/Hammer.html][Hammer]] spoon (get it? hehe) is a simple wrapper around some common
Hamerspoon configuration variables. Not that this gets loaded from my
personal repo, since it's not in the official repository.

#+BEGIN_SRC lua
  Install:andUse("Hammer",
                 {
                   repo = 'zzspoons',
                   config = { auto_reload_config = false },
                   hotkeys = {
                     config_reload = {hyper, "r"},
                     toggle_console = {hyper, "y"} 
                   },
                   start = true
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/Caffeine.html][Caffeine]] spoon allows preventing the display and the machine from
sleeping. I use it frequently when playing music from my machine, to
avoid having to unlock the screen whenever I want to change the music.

#+BEGIN_SRC lua
  Install:andUse("Caffeine", {
                   start = true,
                   hotkeys = {
                     toggle = { hyper, "1" }
                   }
  })
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/MenubarFlag.html][MenubarFlag]] spoon colorizes the menubar according to the selected
keyboard language or layout (Functionality inspired by [[https://pqrs.org/osx/ShowyEdge/index.html.en][ShowyEdge]]. I
use English, Spanish and German, so those are the colors I have
defined.

#+BEGIN_SRC lua
  Install:andUse("MenubarFlag",
                 {
                   config = {
                     colors = {
                       ["U.S."] = { },
                       Spanish = {col.green, col.white, col.red},
                       German = {col.black, col.red, col.yellow},
                     }
                   },
                   start = true
                 }
  )
#+END_SRC

The [[http://www.hammerspoon.org/Spoons/MouseCircle.html][MouseCircle]] spoon shows a circle around the mouse pointer when
triggered. I have it disabled for now because I have the macOS
[[https://support.apple.com/kb/PH25507?locale=en_US&viewlocale=en_US][shake-to-grow feature]] enabled.

#+BEGIN_SRC lua
  Install:andUse("MouseCircle",
                 {
                   disable = true,
                   config = {
                     color = hs.drawing.color.x11.rebeccapurple
                   },
                   hotkeys = {
                     show = { hyper, "m" }
                   }
                 }
  )
#+END_SRC

One of my original bits of Hammerspoon code, now made into a spoon
(although I keep it disabled, since I don't really use it). The
[[http://www.hammerspoon.org/Spoons/ColorPicker.html][ColorPicker]] spoon shows a menu of the available color palettes, and
when you select one, it draws swatches in all the colors in that
palette, covering the whole screen. You can click on any of them to
copy its name to the clipboard, or cmd-click to copy its RGB code.

#+BEGIN_SRC lua
  Install:andUse("ColorPicker",
                 {
                   disable = true,
                   hotkeys = {
                     show = { shift_hyper, "c" }
                   },
                   config = {
                     show_in_menubar = false,
                   },
                   start = true,
                 }
  )
#+END_SRC

I use Homebrew, and when I run =brew update=, I often wonder about what
some of the formulas shown are (names are not always obvious). The
[[http://www.hammerspoon.org/Spoons/BrewInfo.html][BrewInfo]] spoon allows me to point at a Formula or Cask name and press
=Hyper-b= or =Hyper-c= (for Casks) to have the output of the =info= command
in a popup window, or the same key with =Shift-Hyper= to open the URL of
the Formula/Cask.

#+BEGIN_SRC lua
  Install:andUse("BrewInfo",
                 {
                   config = {
                     brew_info_style = {
                       textFont = "Inconsolata",
                       textSize = 14,
                       radius = 10 }
                   },
                   hotkeys = {
                     -- brew info
                     show_brew_info = {hyper, "b"},
                     open_brew_url = {shift_hyper, "b"},
                     -- brew cask info
                     show_brew_cask_info = {hyper, "c"},
                     open_brew_cask_url = {shift_hyper, "c"},
                   }
                 }
  )
#+END_SRC

* Other applications

The [[http://www.hammerspoon.org/Spoons/ToggleSkypeMute.html][ToggleSkypeMute]] spoon sets up the missing keyboard bindings for
toggling the mute button on Skype and Skype for Business. I'm not
fully happy with this spoon - it should auto-detect the application
instead of having separate keys for each application, and it could be
extended to more generic use.

#+BEGIN_SRC lua
  Install:andUse("ToggleSkypeMute",
                 {
                   hotkeys = {
                     toggle_skype = { shift_hyper, "v" },
                     toggle_skype_for_business = { shift_hyper, "f" }
                   }
                 }
  )
#+END_SRC




* The rest

#+BEGIN_SRC lua
  -- http://www.hammerspoon.org/Spoons/HeadphoneAutoPause.html
  Install:andUse("HeadphoneAutoPause",
                 {
                   start = true
                 }
  )
#+END_SRC

#+BEGIN_SRC lua
  -- http://www.hammerspoon.org/Spoons/Seal.html
  Install:andUse("Seal",
                 {
                   hotkeys = { show = { {"cmd"}, "space" } },
                   fn = function(s)
                     s:loadPlugins({"apps", "calc", "safari_bookmarks", "screencapture", "useractions"})
                     s.plugins.safari_bookmarks.always_open_with_safari = false
                     s.plugins.useractions.actions =
                       {
                         ["Hammerspoon docs webpage"] = {
                           url = "http://hammerspoon.org/docs/",
                           icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),
                           --                              hotkey = { hyper, "h" }
                         },
                         ["Leave corpnet"] = {
                           fn = function()
                             spoon.WiFiTransitions:processTransition('foo', 'corpnet01')
                           end,
                           icon = swisscom_logo,
                         },
                         ["Arrive in corpnet"] = {
                           fn = function()
                             spoon.WiFiTransitions:processTransition('corpnet01', 'foo')
                           end,
                           icon = swisscom_logo,
                         },
                         ["Translate using Leo"] = {
                           url = "http://dict.leo.org/ende/index_de.html#/search=${query}",
                           icon = 'favicon',
                           keyword = "leo",
                         },
                         ["Tell me something"] = {
                           keyword = "tellme",
                           fn = function(str) hs.alert.show(str) end,
                         }
                       }
                     s:refreshAllCommands()
                   end,
                   start = true,
                 }
  )
#+END_SRC

#+BEGIN_SRC lua
  function reconfigSpotifyProxy(proxy)
    local spotify = hs.appfinder.appFromName("Spotify")
    local lastapp = nil
    if spotify then
      lastapp = hs.application.frontmostApplication() 
      spotify:kill()
      hs.timer.usleep(40000)
    end
    --   hs.notify.show(string.format("Reconfiguring %sSpotify", ((spotify~=nil) and "and restarting " or "")), string.format("Proxy %s", (proxy and "enabled" or "disabled")), "")
    -- I use CFEngine to reconfigure the Spotify preferences
    cmd = string.format("/usr/local/bin/cf-agent -K -f %s/files/spotify-proxymode.cf%s", hs.configdir, (proxy and " -DPROXY" or " -DNOPROXY"))
    --   print("reconfigSpotifyProxy: running command ", cmd)
    output, status, t, rc = hs.execute(cmd)
    --   print(output, status, t, rc)
    if spotify and lastapp then
      hs.timer.doAfter(3,
                       function()
                         if not hs.application.launchOrFocus("Spotify") then
                           hs.notify.show("Error launching Spotify", "", "")
                         end
                         if lastapp then
                           hs.timer.doAfter(0.5, hs.fnutils.partial(lastapp.activate, lastapp))
                         end
      end)
    end
  end

  function reconfigAdiumProxy(proxy)
    --   hs.notify.show("Reconfiguring Adium", string.format("Proxy %s", (proxy and "enabled" or "disabled")), "")
    local script = string.format([[
  tell application "Adium"
    repeat with a in accounts
      if (enabled of a) is true then
        set proxy enabled of a to %s
      end if
    end repeat
    go offline
    go online
  end tell
  ]], hs.inspect(proxy))
    hs.osascript.applescript(script)
  end

  Install:andUse("WiFiTransitions",
                 {
                   config = {
                     actions = {
                       -- { -- Test action just to see the SSID transitions
                       --    fn = function(_, _, prev_ssid, new_ssid)
                       --       hs.notify.show("SSID change", string.format("From '%s' to '%s'", prev_ssid, new_ssid), "")
                       --    end
                       -- },
                       { -- Enable proxy in Spotify and Adium config when joining corp network
                         to = "corpnet01",
                         fn = {hs.fnutils.partial(reconfigSpotifyProxy, true),
                               hs.fnutils.partial(reconfigAdiumProxy, true),
                         }
                       },
                       { -- Disable proxy in Spotify and Adium config when leaving corp network
                         from = "corpnet01",
                         fn = {hs.fnutils.partial(reconfigSpotifyProxy, false),
                               hs.fnutils.partial(reconfigAdiumProxy, false),
                         }
                       },
                     }
                   },
                   start = true,
                 }
  )
#+END_SRC

#+BEGIN_SRC lua
  local wm=hs.webview.windowMasks
  Install:andUse("PopupTranslateSelection",
                 {
                   config = {
                     popup_style = wm.utility|wm.HUD|wm.titled|wm.closable|wm.resizable,
                   },
                   hotkeys = {
                     translate_to_en = { hyper, "e" },
                     translate_to_de = { hyper, "d" },
                     translate_to_es = { hyper, "s" },
                     translate_de_en = { shift_hyper, "e" },
                     translate_en_de = { shift_hyper, "d" },
                   }
                 }
  )
#+END_SRC

#+BEGIN_SRC lua
  -- Cheat sheet for the running application
  Install:andUse("KSheet",
                 {
                   hotkeys = {
                     toggle = { hyper, "/" }
  }})
#+END_SRC

#+BEGIN_SRC lua
  ----------------------------------------------------------------------
  -- Test stuff

  local localstuff=loadfile(hs.configdir .. "/init-local.lua")
  if localstuff then
    localstuff()
  end
#+END_SRC

#+BEGIN_SRC lua
  -- http://www.hammerspoon.org/Spoons/FadeLogo.html
  Install:andUse("FadeLogo",
                 {
                   config = {
                     default_run = 1.0,
                   },
                   start = true
                 }
  )

  -- If you don't want to use FadeLogo, you can have a regular notification
  -- hs.notify.show("Welcome to Hammerspoon", "Have fun!", "")
#+END_SRC
